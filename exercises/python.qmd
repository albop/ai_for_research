---
title: Python Basics
format: 
    html: default
    ipynb: default
---

(adapted from Quantecon)


## Basics

::: {#exr-python-main}

Run the following code in the python interpreter:

```python
def say_hello(name):
    """This function prints morning greetings"""

    print(f"Good morning {name}!\n")

    # we can import libraries
    import datetime
    t = datetime.datetime.now()

    # blocks are defined by indentation and colons
    if (t.hour,t.min) <= (9,15):
        print("All good?\n")
    else:
        print("Time to get started?\n")


say_hello("Pablo")
```

:::


::: {#exr-python-main}

What do you think the value of `z` is after running the code below?

```{python}
z = 3
z = z + 4
print("z is", z)
```

:::

```{python}
# your response there
```

::: {#exr-python-main}

Read about what the `len` function does (by writing len?).

What will it produce if we give it the variable `x`?

Check whether you were right by running the code `len(x)`.
:::

```{python}
# your code here
```

::: {#exr-python-main}

We can use our introspection skills to investigate a package’s contents.

In the cell below, use tab completion to find a function from the `time`
module that will display the **local** time.

Use `time.FUNC_NAME?` (where `FUNC_NAME` is replaced with the
function you found) to see information about that function and
then call the function.

Look for something to do with the word `local`

:::

```{python}
import time
# your code here
```

::: {#exr-python-main}

The code below is invalid Python code (once uncommented)

:::

```{python}
# x = 'What's wrong with this string'
```

## Collections

::: {#exr-python-main}
In the first cell, try `y.append(z)`.

In the second cell try `y.extend(z)`.

Explain the behavior.

When you are trying to explain use `y.append?` and `y.extend?` to
see a description of what these methods are supposed to do.

:::

```{python}
y = ["a", "b", "c"]
z = [1, 2, 3]
# 
```

```{python}
y = ["a", "b", "c"]
z = [1, 2, 3]
# 
```

::: {#exr-python-main}

Verify that tuples are indeed immutable by attempting the following:

- Changing the first element of `t` to be `100`  
- Appending a new element `"!!"` to the end of `t` (remember with a
  list `x` we would use `x.append("!!")` to do this  
- Sorting `t`  
- Reversing `t` 

:::

```{python}
t = (1,2,3,4)
```

::: {#exr-python-main}

Look at the [World Factbook for Australia](https://www.cia.gov/the-world-factbook/countries/australia)
and create a dictionary with data containing the following types:
float, string, integer, list, and dict.  Choose any data you wish.

To confirm, you should have a dictionary that you identified via a key.
:::

```{python}
# your code here
```

::: {#exr-python-main}
Use Jupyter’s help facilities to learn how to use the `pop` method to
remove the key `"irrigated_land"` (and its value) from the dict.
:::

```{python}
# uncomment and use the Inspector or ?
#china_data.pop()
```



::: {#exr-python-main}

Explain what happens to the value you popped.

Experiment with calling `pop` twice.

:::

```{python}
# your code here
```


## Control

::: {#exr-python-main}

Run the following two variations on the code with only a single change in the indentation.

After, modify the `x` to print `3` and then `2, 3` instead.

:::


```{python}
x = 1

if x > 0:
    print("1")
    print("2")
print("3")
```

```{python}
x = 1

if x > 0:
    print("1")
print("2") # changed the indentation
print("3")
```


::: {#exr-python-main}

Write a for loop that uses the lists of cities
and states below to print the same “{city} is in {state}” using
a `zip` instead of an `enumerate`.

:::

```{python}
cities = ["Phoenix", "Austin", "San Diego", "New York"]
states = ["Arizona", "Texas", "California", "New York"]
```

```{python}
for i,c in enumerate(cities):
    print(c, " : ", states[i])
```

```{python}
# your code here
```
